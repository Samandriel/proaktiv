generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tracker {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  trackerType    String[]
  trackerGroupId String       @db.Uuid
  dataLog        Json[]       @db.Json
  description    String?
  userId         String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  TrackerGroup   TrackerGroup @relation(fields: [trackerGroupId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model TrackerGroup {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  userId    String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Tracker   Tracker[]
  user      User      @relation(fields: [userId], references: [id])
}

model Todo {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    Int       @default(0)
  eventId     String?   @unique @db.Uuid
  userId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  event       Event?    @relation(fields: [eventId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  TodoTag     TodoTag[]
}

model Note {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  body       String?
  pinned     Boolean   @default(false)
  background String?
  archived   Boolean   @default(false)
  userId     String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  NoteTag    NoteTag[]
}

model Event {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recurrence   Boolean  @default(false)
  start        DateTime
  end          DateTime
  interval     Int?
  intervalUnit String?
  reminder     Int?
  reminderUnit String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  Todo         Todo?
}

model Tag {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  NoteTag   NoteTag[]
  TodoTag   TodoTag[]
}

model TodoTag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  todoId    String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Tag       Tag      @relation(fields: [tagId], references: [id])
  Todo      Todo     @relation(fields: [todoId], references: [id])
}

model NoteTag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  noteId    String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Note      Note     @relation(fields: [noteId], references: [id])
  Tag       Tag      @relation(fields: [tagId], references: [id])
}

model User {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  Note              Note[]
  Todo              Todo[]
  Tracker           Tracker[]
  TrackerGroup      TrackerGroup[]
  OAuth             UserOAuth[]
  UserPasswordReset UserPasswordReset[]
  UserPreference    UserPreference[]
  UserProfile       UserProfile[]
  UserSession       UserSession[]
}

model UserOAuth {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @db.Uuid
  accessToken    String   @unique
  refreshToken   String   @unique
  provider       String
  providerUserId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  User           User     @relation(fields: [userId], references: [id])
}

model UserProfile {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String
  lastName  String
  bio       String?
  avatar    String?
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model UserSession {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  ipAddress String
  platform  String
  browser   String
  userAgent String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model UserPasswordReset {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @default(dbgenerated("gen_random_uuid()"))
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model UserPreference {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  theme              String   @default("light")
  notesView          String   @default("list")
  notesSort          String   @default("updated")
  notesSortDirection String   @default("desc")
  notesCustomSort    String[] @default([])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  User               User     @relation(fields: [userId], references: [id])
}
