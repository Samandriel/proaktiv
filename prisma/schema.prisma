generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trackers {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  trackerType    String[]
  trackerGroupId String?        @db.Uuid
  dataLog        Json[]         @db.Json
  description    String?
  userId         String         @db.Uuid
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  TrackerGroup   TrackerGroups? @relation(fields: [trackerGroupId], references: [id])
  user           Users          @relation(fields: [userId], references: [id])
}

model TrackerGroups {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  userId    String     @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  user      Users      @relation(fields: [userId], references: [id])
  Tracker   Trackers[]
}

model Todos {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  completed   Boolean      @default(false)
  eventId     String?      @unique @db.Uuid
  userId      String       @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  priority    TodoPriority @default(unset)
  TodoTag     TodoTags[]
  event       Events?      @relation(fields: [eventId], references: [id])
  user        Users        @relation(fields: [userId], references: [id])
}

model Notes {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  body       String?
  pinned     Boolean    @default(false)
  background String?
  archived   Boolean    @default(false)
  userId     String     @db.Uuid
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  NoteTag    NoteTags[]
  user       Users      @relation(fields: [userId], references: [id])
}

model Events {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recurrence   Boolean          @default(false)
  start        DateTime         @default(now())
  end          DateTime         @default(now())
  interval     Int              @default(0)
  reminder     Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  intervalUnit TimeIntervalUnit @default(unset)
  reminderUnit TimeIntervalUnit @default(unset)
  Todo         Todos?
}

model Tags {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  NoteTag   NoteTags[]
  TodoTag   TodoTags[]
}

model TodoTags {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  todoId    String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Tag       Tags     @relation(fields: [tagId], references: [id])
  Todo      Todos    @relation(fields: [todoId], references: [id])
}

model NoteTags {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  noteId    String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Note      Notes    @relation(fields: [noteId], references: [id])
  Tag       Tags     @relation(fields: [tagId], references: [id])
}

model Users {
  id                String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String               @unique
  password          String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @default(now()) @updatedAt
  role              UserRole             @default(user)
  Note              Notes[]
  Todo              Todos[]
  TrackerGroup      TrackerGroups[]
  Tracker           Trackers[]
  OAuth             UserOAuths[]
  UserPasswordReset UserPasswordResets[]
  UserPreference    UserPreferences[]
  UserProfile       UserProfiles[]
  UserSession       UserSessions[]
}

model UserOAuths {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @db.Uuid
  accessToken    String   @unique
  refreshToken   String   @unique
  provider       String
  providerUserId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  roles          String[]
  User           Users    @relation(fields: [userId], references: [id])
}

model UserProfiles {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String
  lastName  String
  bio       String?
  avatar    String?
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      Users    @relation(fields: [userId], references: [id])
}

model UserSessions {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  ipAddress String
  platform  String
  browser   String
  userAgent String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      Users    @relation(fields: [userId], references: [id])
}

model UserPasswordResets {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @default(dbgenerated("gen_random_uuid()"))
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      Users    @relation(fields: [userId], references: [id])
}

model UserPreferences {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String             @db.Uuid
  theme              String             @default("light")
  notesCustomSort    String[]           @default([])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  notesView          NotesView          @default(grid)
  notesSort          notesSort          @default(created)
  notesSortDirection notesSortDirection @default(desc)
  User               Users              @relation(fields: [userId], references: [id])
}

enum TodoPriority {
  unset
  low
  medium
  high
  very_high
}

enum TimeIntervalUnit {
  unset
  minute
  hour
  day
  week
  month
  year
}

enum UserRole {
  admin
  user
}

enum notesSortDirection {
  asc
  desc
}

enum notesSort {
  created
  updated
  alphabetical
  custom
}

enum NotesView {
  list
  grid
  tile
}
